
5.2. URI

	Некоторые параметры конфигурации и некоторые функции зависят от URI, или "Универсальный идентификатор ресурса". Формат URI, строка аналогична обобщенному синтаксису для схемы URI. Таким образом, она может содержать (в порядке убывания) имя пользователя для входа в систему, пароль, IP-адрес хоста или имя хоста и номер порта. Только номер порта всегда является обязательным. Пароль является обязательным, если указано имя пользователя, если имя пользователя, не является "гостем". Таким образом, формально, синтаксис URI является [host:]port или [username:password@]host:port. Если узел не указан, то '0.0.0.0' или '[::] предполагается, что означает, соответственно, любой IPv4-адрес или любой IPv6-адрес, на локальной машине. Если username:password отсутствует, тогда предполагается пользователь 'гость'. Некоторые примеры:

    URI fragment 					Example
    port 							3301
    host:port 						127.0.0.1:3301
    username:password@host:port 	notguest:sesame@mail.ru:3301

5.3. Initialization file

lua>
	#!/usr/bin/env tarantool
	-- Пример стартового скрипта для запуска Таратул
	-- Скрипт использует функции ОС и параметр
	box.cfg{
		listen				= os.getenv("LISTEN_URI"),
		slab_alloc_arena	= 0.1,
		pid_file			= "tarantool.pid",
		rows_per_wal		= 50
	}
	print('Starting ', arg[1])

	--		$ export LISTEN_URI=3301
	--		$ ~/tarantool/src/tarantool script.lua ARG
	--		... ...
	--		Starting  ARG
	--		... ...

5.4. Configuration parameters

	Параметры конфигурации имеют вид:

	box.cfg{ key = value [, key = value ...]]

5.4.1. Basic parameters

background
    Запуск сервера в качестве фоновой задачи. Параметры logger и PID_FILE должны быть ненулевыми для этой работы.
    Type: boolean
    Default: false
    Dynamic: no

coredump
    Устаревшее. Do not use.
    Type: boolean
    Default: false
    Dynamic: no

custom_proc_title
    Добавьте данную строку в названии процесса сервера (что показано в колонке COMMAND для комманд ps -ef и top -c).
    Например, обычно ps -ef показывает серверный процесс Tarantool следующим образом:
    $ ps -ef | grep tarantool
    1000     14939 14188  1 10:53 pts/2    00:00:13 tarantool <running>
	
    Но если параметры конфигурации включают пользовательский заголовок custom_proc_title='sessions', то выход выглядит следующим образом:
    $ ps -ef | grep tarantool
    1000     14939 14188  1 10:53 pts/2    00:00:16 tarantool <running>: sessions
	
    Type: string
    Default: null
    Dynamic: yes

listen
    Номер порта данных для чтения/записи или URI (универсальный идентификатор ресурса) строка.
	Не имеет значения по умолчанию, поэтому необходимо указать, если подключение будет происходить от удаленных клиентов, которые не используют "администратора порта". Соединения, сделанные с listen=URI иногда называют "двоичный протокол" или соединения "первичный порт".
    Типичное значение 3301. Параметр listen также может быть установлен для локального горячего резерва.
    Примечание: Точная копия (replica) также связывается с этим портом, и принимает соединения, но эти соединения могут служить только для чтения, пока реплика не станет мастером.
    Type: integer or string
    Default: null
    Dynamic: yes

pid_file
    Храните идентификатор процесса в этом файле. Может указываться относительно work_dir. Типичное значение "tarantool.pid".
    Type: string
    Default: null
    Dynamic: no

read_only
    Поместите сервер в режиме только для чтения. После этого, любые запросы, которые пытаются изменить данные потерпит неудачу с ошибкой ER_READONLY.
    Type: boolean
    Default: false
    Dynamic: yes

snap_dir
    Каталог, в котором будут храниться файлы снимков (.snap). Может указываться относительно work_dir. Если не указано, по умолчанию work_dir. Смотрите также wal_dir.
    Type: string
    Default: "."
    Dynamic: no

vinyl_dir
    Каталог, в котором будут храниться винил файлы или подкаталоги. Может указываться относительно work_dir. Если не указано, по умолчанию work_dir.
    Type: string
    Default: "."
    Dynamic: no

username
    UNIX имя пользователя для переключения после запуска.
    Type: string
    Default: null
    Dynamic: no

wal_dir
    Каталог, в котором сохраняются файлы записи журнала (.xlog). Может указываться относительно work_dir. Иногда wal_dir и snap_dir указаны с различными значениями, так что файлы записи журналов и файлы моментальных снимков могут храниться на разных дисках. Если не указано, по умолчанию work_dir.
    Type: string
    Default: "."
    Dynamic: no

work_dir
    Каталог, в котором хранятся файлы во время работы базы данных. Сервер переходит на work_dir с chdir(2) после старта. Может быть относительно текущего каталога. Если не указано, по умолчанию в текущем каталоге. Другие параметры каталогов могут указываться относительно work_dir, например:
    box.cfg{work_dir='/home/user/A',wal_dir='B',snap_dir='C'}
    поместит файлы журналов /home/user/A/B, файлы снимков в /home/user/A/C, и все другие файлы или папки в /home/user/A.
    Type: string
    Default: null
    Dynamic: no

5.4.2. Configuring the storage

slab_alloc_arena
    Сколько памяти выделяет Tarantool на самом деле для хранения кортежей, в гигабайтах. Когда предел достигнут, INSERT или UPDATE запросы начинают давать сбой с ошибкой ER_MEMORY_ISSUE. Пока сервер не выходит за установленные пределы выделенные для кортежей, дополнительная память используется для хранения индексов и информации о подключении. В зависимости от конфигурации и загруженности, Tarantool может потреблять до 20% больше, чем предел, установленный здесь.
    Type: float
    Default: 1.0
    Dynamic: no

slab_alloc_factor
    Используйте slab_alloc_factor как множитель для вычисления размеров областей памяти, в которых хранятся кортежи. Более низкое значение может привести к уменьшению потрачены впустую памяти зависимости от общего объема памяти и распределения размеров элементов.
    Type: float
    Default: 1.1
    Dynamic: no

slab_alloc_maximal
    Размер самого большого блока распределения. Он может быть увеличен, если необходимо хранить большие кортежи.
    Type: integer
    Default: 1048576 (= 1 Mb; прим. переводчика)
    Dynamic: no

slab_alloc_minimal
    Размер самого маленького блока распределения. Он может быть уменьшен, если большинство кортежей очень малы. Значение должно быть от 8 до 1048280 включительно.
    Type: integer
    Default: 16
    Dynamic: no

vinyl
    Конфигурация по умолчанию винила может быть изменена
    vinyl = {
      branch_age_wm = number,
      branch_age_period = number of seconds,
      memory_limit = number of gigabytes,
      compact_wm = number,
      threads = number,
      branch_prio = number,
      branch_age = number,
    }
    Этот метод может измениться в будущем.
    Default values are:
    vinyl = {
      branch_age_wm = 0,
      branch_age_period = 0,
      memory_limit = 1,
      compact_wm = 2,
      threads = 5,
      branch_prio = 2,
      branch_age = 0,
    }

5.4.3. Snapshot daemon
    Снимок демон представляет собой поток, который постоянно работает. Через определенные интервалы, он может сделать новый снимок файлов (.snap), а затем, возможно, удалить старые файлы снимков. Если снимок демон удаляет старый файл снимка, он будет также удалить любой журнал записи вперед (.xlog) файлы, которые старше, чем файл снимка и содержат информацию, которая присутствует в файле снимка.
    Настройки период снимка и количество снимок конфигурации определяют, как долго интервалы, и сколько снимков должно существовать до возникновения абсорбция.

snapshot_period
    Интервал между действиями моментального снимка демона, в секундах. Если snapshot_period устанавливается на значение больше нуля, и есть деятельность, которая вызывает изменение в базу данных, а затем снимок демон будет вызывать box.snapshot каждые snapshot_period секунд, создавая новый файл снимка каждый раз.
    For example: box.cfg{snapshot_period=3600} вызовет снимок демона, чтобы создать новый снимок базы данных один раз в час.
    Type: integer
    Default: 0
    Dynamic: yes

snapshot_count
    Максимальное количество снимков, которые могут существовать на директории snap_dir перед моментальной демон удалит старые снимки. Если snapshot_count равен нулю, то снимок демон не удаляет старые снимки. Например:
    box.cfg{
        snapshot_period = 3600,
        snapshot_count  = 10
    }
    вызовет снимок демона создать новый снимок каждый час, пока не будет создано десять снимков. После этого он удалит самый старый снимок (и любые связанные с ним файлы с упреждением-лог) после создания нового.
    Type: integer
    Default: 6
    Dynamic: yes

5.4.4. Binary logging and snapshots
    panic_on_snap_error,
    panic_on_wal_error,
    rows_per_wal,
    snap_io_rate_limit,
    wal_mode,
    wal_dir_rescan_delay

panic_on_snap_error
    Если есть ошибка при чтении файла снимка (при запуске сервера), прервать.
    Type: boolean
    Default: true
    Dynamic: no

panic_on_wal_error
    Если есть ошибка при чтении файла журнала записи вперед (при запуске сервера или передать на реплику), прервать операцию.
    Type: boolean
    Default: true
    Dynamic: yes

rows_per_wal
    Сколько записей журнала для хранения в одном файле записи журнала. Когда этот предел достигнут, Tarantool создает еще один файл с именем <first-lsn-in-wal>.xlog. Это может быть полезно для простых RSYNC на основе резервных копий.
    Type: integer
    Default: 500000
    Dynamic: no

snap_io_rate_limit
    Уменьшите дроссельный эффект box.snapshot на INSERT / UPDATE / DELETE производительность, установив ограничение на количество мегабайт в секунду которые он может записать на диск. То же самое может быть достигнуто путем разделения wal_dir и snap_dir местоположения и перемещения моментальных снимков на отдельный диск.
    Type: float
    Default: null
    Dynamic: yes

wal_mode
    Укажите режим синхронизации fiber-WAL-disk как:
        none: Журнал записи вперед не поддерживается;
        write: потоки ожидают пока их данные должны быть записаны в журнал записи вперед (не fsync(2));
        fsync: потоки ждут своих данных, fsync(2) следует каждый write(2);
    Type: string
    Default: "write"
    Dynamic: yes

wal_dir_rescan_delay
    Количество секунд периодических сканирований каталога с лог файлами, когда проверяются изменения лог-файлов для репликации или локального горячего резерва.
    Type: float
    Default: 2
    Dynamic: no

5.4.5. Replication

replication_source
    Если replication_source не пустая строка, сервер считается точной копией Tarantool. Сервер реплики попытается подключиться к мастеру, который replication_source определяет с URI, например konstantin:secret_password@tarantool.org:3301.
    Если существует более одного источника репликации в кластере, указать массив URIs, например
    box.cfg{replication_source = {uri#1,uri#2}}
    Если один из URIs является "self", то есть, если один из URI для того же сервера на котором box.cfg {} в настоящее время выполняется, то он игнорируется. Таким образом, можно использовать ту же спецификацию replication_source на нескольких серверах.
    Имя пользователя по умолчанию ‘guest’. Сервер реплики не принимает data-change  запросы на слушаемом порту. Параметр replication_source является динамическим, то есть, чтобы войти в режим мастер, просто установите replication_source в пустую строку и издайте box.cfg{replication_source=new-value}.
    Type: string
    Default: null
    Dynamic: yes

5.4.6. Networking
    io_collect_interval,
    readahead

io_collect_interval
    Сервер будет спать в течение io_collect_interval секунд между итераций цикла событий. Может использоваться для снижения нагрузки на процессор при развертывании, в котором число клиентских подключений велико, но запросы не так часто (например, каждое соединение вопросов лишь несколько запросов в секунду).
    Type: float
    Default: null
    Dynamic: yes

readahead
    Размер буфера упреждающего чтения, связанного с подключением клиента. Чем больше буфер, тем больше памяти активное соединение и потребляет больше запросов можно прочитать из операционной системы буфера в один системный вызов.  Правило заключается в том, чтобы убедиться, что буфер может содержать, по крайней мере, несколько десятков запросов. Поэтому, если типичный кортеж в запросе велико, например несколько килобайт или даже мегабайты, упреждающее чтение размер буфера должен быть увеличен. Если обработка запроса порционный не используется, это разумно, чтобы оставить эту установку в состояние по умолчанию.
    Type: integer
    Default: 16320
    Dynamic: yes

5.4.7. Logging

log_level
    На сколько многословным будет журналирование. Есть шесть классов многословности журнала:
        1 – SYSERROR
        2 – ERROR
        3 – CRITICAL
        4 – WARNING
        5 – INFO
        6 – DEBUG
    Установив LOG_LEVEL, можно включить ведение журнала всех классов ниже или равно заданному уровню. Tarantool печатает свои журналы на стандартный поток ошибок по умолчанию, но это может быть изменено с помощью параметра конфигурации регистратора.
    Type: integer
    Default: 5
    Dynamic: yes

logger
    По умолчанию, посылается журнал на стандартный поток ошибок (STDERR). Если указанный регистратор, журнал отправляется в файл, или к каналу, или системный журнал.
    Example setting:
    box.cfg{logger = 'tarantool.log'}
    or
    box.cfg{logger = 'file: tarantool.log'}
    Это позволит открыть файл tarantool.log для вывода на каталог по умолчанию сервера. Если строка регистратор не имеет префикса или имеет "file:" префикс, то строка интерпретируется как путь к файлу.
	
    Example setting:
    box.cfg{logger = '| cronolog tarantool.log'}
    or
    box.cfg{logger = 'pipe: cronolog tarantool.log'}'
    Это запустит программу cronolog при запуске сервера, и будет посылать все сообщения журнала на стандартный ввод (stdin) из cronolog. Если строка регистратор начинается с '|' или имеет приставку "pipe:", то строка интерпретируется как трубопровод Unix.
	
    Example setting:
    box.cfg{logger = 'syslog:identity=tarantool'}
    or
    box.cfg{logger = 'syslog:facility=user'}
    or
    box.cfg{logger = 'syslog:identity=tarantool,facility=user'}
    Если строка регистратор имеет префикс "syslog:", то строка интерпретируется как сообщение для программы Syslogd, которая обычно работает в фоновом режиме любой Unix-подобной платформе. Можно дополнительно указать тождество, средство, или обоих. Идентичность произвольная строка, значение по умолчанию = Tarantool, который будет размещен в начале всех сообщений. Объект представляет собой сокращение от имени одного из системного журнала объектов, значение по умолчанию = пользователя, которые говорят Syslogd, где сообщение должно идти.
    Возможные значения для объекта являются: auth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, syslog, user, uucp, local0, local1, local2, local3, local4, local5, local6, local7.
    Установка объекта в настоящее время игнорируется, но будет использоваться в будущем.
    При входе в файл, Tarantool вновь открывает журнал на SIGHUP. Когда журнал представляет собой программу, идентификатор процесса сохраняется в переменной log.logger_pid. Вы должны послать ему сигнал поворота журнала.
    Type: string
    Default: null
    Dynamic: no

logger_nonblock
    Если logger_nonblock равно правда, Tarantool не блокирует на дескриптор файла журнала, когда он не готов к записи, и сбрасывает сообщение вместо этого. Если log_level высока, и много сообщений идут в лог-файл, установив logger_nonblock истина может повысить производительность протоколирования за счет некоторых сообщений журнала теряться.
    Type: boolean
    Default: true
    Dynamic: no

too_long_threshold
    При обработке запроса занимает больше времени, чем заданное значение (в секундах), предупредить об этом в журнале. Имеет эффект, только если log_level больше или равно 4 (ВНИМАНИЕ).
    Type: float
    Default: 0.5
    Dynamic: yes
